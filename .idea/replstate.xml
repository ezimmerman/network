<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1430849205943">{:repl-history {:ide [], :local [&quot;(def product-stores {\&quot;product1-store1\&quot; {:product-utility nil :existing-inventory 0 :target-inventory 0 :final-order 0}})\n(def product-warehouses {\&quot;product1-warehouse1\&quot; {:product-id \&quot;product1\&quot; :product-utility nil :product-stores {product-stores} :final-order 0}})\n(def product-vendors {\&quot;product1-vendor1\&quot; {:warehouses {product-warehouses}, :final-order 0}})&quot; &quot;(def product-warehouses {\&quot;product1-warehouse1\&quot; {:product-id \&quot;product1\&quot; :product-utility nil :product-stores {product-stores} :final-order 0}})&quot; &quot;(def product-warehouses {\&quot;product1-warehouse1\&quot; {:product-utility nil, :product-stores {product-stores}, :final-order 0}})&quot; &quot;(def product-stores {\&quot;product1-store1\&quot; {:product-utility nil :existing-inventory 0 :target-inventory 0 :final-order 0}})&quot; &quot;(def product-warehouses {\&quot;product1-warehouse1\&quot; {:product-utility nil :product-stores {product-stores} :final-order 0}})&quot; &quot;(def product-warehouses {\&quot;product1-warehouse1\&quot; {:product-utility nil :product-stores {} :final-order 0}})&quot; &quot;(def data {\&quot;product1-vendor1\&quot; {:warehouses {{\&quot;product1-warehouse1\&quot; {:product-utility nil, :product-stores {\&quot;product1-store1\&quot; {:product-utility nil :existing-inventory 0 :target-inventory 0 :final-order 0}}, :final-order 0}}}, :final-order 0}})&quot; &quot;(def data {\&quot;product1-vendor1\&quot; {:warehouses {\&quot;product1-warehouse1\&quot; {:product-utility nil, :product-stores {\&quot;product1-store1\&quot; {:product-utility nil :existing-inventory 0 :target-inventory 0 :final-order 0}}, :final-order 0}}, :final-order 0}})&quot; &quot;(flow data)&quot; &quot;(make-product-store \&quot;product1-location0\&quot;)&quot; &quot;(def product1-store1 (make-product-store \&quot;product1-store1\&quot;))&quot; &quot;(def product1-warehouse1 (make-product-warehouse \&quot;product1-warehouse1\&quot; 0 0 (seq [product1-store1])))&quot; &quot;(def product1-vendor1 (make-product-vendor \&quot;product1-vendor1\&quot; 0 0 (seq [product1-warehouse1])))&quot; &quot;(make-product-store \&quot;test\&quot;)&quot; &quot;(make-product-store \&quot;test\&quot; :existing-inventory 20 :target-inventory 50)&quot; &quot;(clojure.pprint/pprint (s/explain ProductVendor))&quot; &quot;(def tshirt-deephave (make-product-store \&quot;tshirt-deephaven\&quot;))&quot; &quot;(s/check ProductStore tshirt-deephave)&quot; &quot;(def tshirt-eden-prarie (make-product-store 29))&quot; &quot;(s/check ProductStore tshirt-eden-prarie)&quot; &quot;(product-vendors)&quot; &quot;product-vendors&quot; &quot;(into {} include-utility product-stores-index)&quot; &quot;(map pprint product-stores-index)&quot; &quot;(apply map pprint product-stores-index)&quot; &quot;(into {} (include-utility product-stores-index))&quot; &quot;(map #(assoc %2 (first %) (get-product-utility (rest %))) product-stores-index {})&quot; &quot;(mapcat #( [(first %) (get-product-utility (rest %)]) product-stores-index )&quot; &quot;(mapcat #( [(first %) (get-product-utility (rest %))]) product-stores-index)&quot; &quot;(mapcat #(vector (first %) (get-product-utility (rest %))) product-stores-index)&quot; &quot;(map first product-stores-index)&quot; &quot;\n(include-utility product-stores-index)&quot; &quot;(mapcat #(vector (first %) (get-product-utility (second %))) product-stores-index)&quot; &quot;(mapcat #(vector (first %) (product-utility (second %))) product-stores-index)&quot; &quot;(seq product-stores-index)&quot; &quot;(​def​ units [:lb :oz :kg])\n\n&quot; &quot;(def units [:lb :oz :kg])&quot; &quot;(some #(:oz :lb) units)&quot; &quot;(m/filter-keys even? product-stores-index) &quot; &quot;(keys product-stores-index)&quot; &quot;product-warehouse-index&quot; &quot;(def product-stores-index {:p0-s0 (make-product-store \&quot;product0-store0\&quot; :target-inventory 5) :p0-s1 (make-product-store \&quot;product0-store1\&quot; :target-inventory 10)})&quot; &quot;(def product-warehouses-index {:p0-w0 (make-product-warehouse \&quot;product0-warehouse0\&quot; (keys product-stores-index))})&quot; &quot;product-stores-index&quot; &quot;product-warehouses-index&quot; &quot;(:product-stores product-warehouses-index)&quot; &quot;(first (:product-stores product-warehouses-index))&quot; &quot;(:product-stores (:p0-w0 product-warehouses-index))&quot; &quot;(include-utility product-warehouses-index (include-utility product-stores-index))&quot; &quot;(include-utility product-warehouses-index \n                 (include-utility product-stores-index))&quot; &quot;(def my-seq (seq {:a \&quot;a\&quot; :b \&quot;b\&quot; :c \&quot;c\&quot;}))&quot; &quot;(:a my-seq)&quot; &quot;(include-utility product-stores-index)&quot; &quot;(include-utility product-warehouses-index\n                 (include-utility product-stores-index))&quot; &quot;(include-utility product-vendors-index (include-utility product-warehouses-index\n                 (include-utility product-stores-index)))&quot; &quot;(get-highest-product-vendor-utility)&quot; &quot;(get-utilities)&quot; &quot;(name :keyword)&quot; &quot;(is-vendor-key? :v0)&quot; &quot;(name :v0)&quot; &quot;(subs (name :v0) 1 1)&quot; &quot;(subs (name :v0) 0 0 )&quot; &quot;(subs (name :v0) 0 1 \n      )&quot; &quot;(keys {:v0 1 :s0 2})&quot; &quot;(get-vendor-utility (get-utilities stores-index warehouses-index vendors-index))&quot; &quot;(update-inv (make-product-store \&quot;store0\&quot; :target-inventory 5))&quot; &quot;(update-stores nodes)&quot; &quot;(update-index stores-index)&quot; &quot;(update-index warehouse-index)&quot; &quot;(update-index warehouses-index)&quot; &quot;(map #(print % print %2) {:a 1 :b 2})&quot; &quot;(map #(print % print %2 []) {:a 1 :b 2})&quot; &quot;(map #([% %2]) {:a 1 :b 2})&quot; &quot;(map (fn [k v] [k v]) {:a 1 :b 2})&quot; &quot;(map (fn [[k v]] [k v]) {:a 1 :b 2})&quot; &quot;(flow-pack {:s0 1} nodes)&quot; &quot;(get-vendor-utility {:v0 1.0})&quot; &quot;(flow-one-pack {:s0 1} nodes)&quot; &quot;\n(flow-one-pack (get-utilities nodes) nodes)&quot; &quot;\n(into {} (flow-one-pack (get-utilities nodes) nodes))&quot; &quot;(get-in )&quot; &quot;\n\n(flow-one-pack (get-utilities nodes) nodes)&quot; &quot;(get-in nodes [:stores [:s1]])&quot; &quot;nodes&quot; &quot;(get-in nodes [:stores :s1])&quot; &quot;\n\n\n(flow-one-pack (get-utilities nodes) nodes)&quot; &quot;(get-utilities nodes)&quot; &quot;(get-utilities (get-utilities nodes))&quot; &quot;(get-vendor-utility (get-utilities nodes))&quot; &quot;(flow-one-pack (get-utilities nodes) nodes)&quot; &quot;(flow nodes)&quot;], :remote []}}</component>
</project>