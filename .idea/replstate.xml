<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1440794994364">{:repl-history {:ide [], :local [&quot;(update-index warehouse-index)&quot; &quot;(update-index warehouses-index)&quot; &quot;(map #(print % print %2) {:a 1 :b 2})&quot; &quot;(map #(print % print %2 []) {:a 1 :b 2})&quot; &quot;(map #([% %2]) {:a 1 :b 2})&quot; &quot;(map (fn [k v] [k v]) {:a 1 :b 2})&quot; &quot;(map (fn [[k v]] [k v]) {:a 1 :b 2})&quot; &quot;(flow-pack {:s0 1} nodes)&quot; &quot;(get-vendor-utility {:v0 1.0})&quot; &quot;(flow-one-pack {:s0 1} nodes)&quot; &quot;\n(flow-one-pack (get-utilities nodes) nodes)&quot; &quot;\n(into {} (flow-one-pack (get-utilities nodes) nodes))&quot; &quot;(get-in )&quot; &quot;\n\n(flow-one-pack (get-utilities nodes) nodes)&quot; &quot;(get-in nodes [:stores [:s1]])&quot; &quot;nodes&quot; &quot;(get-in nodes [:stores :s1])&quot; &quot;\n\n\n(flow-one-pack (get-utilities nodes) nodes)&quot; &quot;(get-vendor-utility (get-utilities nodes))&quot; &quot;(get-utilities (get-utilities nodes))&quot; &quot;(flow-one-pack (get-utilities nodes) nodes)&quot; &quot;(def map {:a a :b b :c c})&quot; &quot;(def map {:a \&quot;a\&quot; :b \&quot;b\&quot; :c \&quot;c\&quot;})&quot; &quot;(get :a map)&quot; &quot;(get map :a)&quot; &quot;(get (seq map) :a)&quot; &quot;(filter #(complement nil? (:a %) ) map)&quot; &quot;(filter #((complement nil?) (:a %) ) map)&quot; &quot;(filter #( nil? (:a %) ) map)&quot; &quot;(filter #( nil? (:a (into {} %)) ) map)&quot; &quot;(def vec [:a a])&quot; &quot;(def vec [:a \&quot;a\&quot;])&quot; &quot;(:a vec)&quot; &quot;(utility (:warehouses vendor))&quot; &quot;(utility (first (:warehouses vendor)))&quot; &quot; (:stores (first (:warehouses vendor)) )&quot; &quot;(first (:stores (first (:warehouses vendor)) ))&quot; &quot;(utility (first (:stores (first (:warehouses vendor)) )))&quot; &quot;(map utility (:stores (first (:warehouses vendor)) ))&quot; &quot;(include-stores warehouse (into {} (map utility (get-stores warehouse))))&quot; &quot;(include-stores warehouse (into [] (map utility (get-stores warehouse))))&quot; &quot;(:stores warehouse (include-stores warehouse (into [] (map utility (get-stores warehouse)))))&quot; &quot;(:stores (include-stores warehouse (into [] (map utility (get-stores warehouse)))))&quot; &quot;(def stores (:stores (include-stores warehouse (into [] (map utility (get-stores warehouse))))))&quot; &quot;(reduce #(max (:utility %2)  %) 0 stores)&quot; &quot;(assoc warehouse :utility (reduce #(max (:utility %2)  %) 0 stores))&quot; &quot;(utility warehouse)&quot; &quot;(def warehouse (make-warehouse \&quot;warehouse0\&quot; [(make-store \&quot;store0\&quot; :target-inventory 5)\n                                             (make-store \&quot;store1\&quot; :target-inventory 10)\n                                             (make-store \&quot;store2\&quot; :target-inventory 0)]))&quot; &quot;(def util-vendor (utility vendor))&quot; &quot;util-vendor&quot; &quot;(def my-store (make-store my-store ))&quot; &quot;mystore&quot; &quot;(flow-one-pack my-store)\\&quot; &quot;(def my-store (make-store \&quot;my-store\&quot; :target-inventory 0 ))&quot; &quot;(flow-one-pack my-store)&quot; &quot;(def stores (:stores warehouse))&quot; &quot;(def my-store (make-store \&quot;store0\&quot; :target-inventory 100 ))&quot; &quot;my-store&quot; &quot;(replace-entity my-store stores)&quot; &quot;warehouse&quot; &quot;stores&quot; &quot;(flow-one-pack (reduce highest-util-entity (:stores warehouse)))&quot; &quot;(replace-entity (flow-one-pack (reduce highest-util-entity (:stores warehouse))) (:stores warehouse))&quot; &quot;(utility vendor)&quot; &quot;(def warehouse (first (:warehouses (utility vendor))))&quot; &quot;(assoc warehouse :stores (replace-entity (flow-one-pack (reduce highest-util-entity (:stores warehouse))) (:stores warehouse)))&quot; &quot;(flow-one-pack warehouse)&quot; &quot;(flow-one-pack vendor)&quot; &quot;(assoc vendor :warehouses (replace-entity (flow-one-pack (reduce highest-util-entity (:warehouses vendor))) (:warehouses vendor)))&quot; &quot;(reduce highest-util-entity (:warehouses vendor))&quot; &quot;(reduce highest-util-entity (:warehouses my-vendor))&quot; &quot;my-vendor&quot; &quot;(def my-vendor (utility vendor))&quot; &quot;(flow-one-pack my-vendor)&quot; &quot;(flow vendor)&quot; &quot;(flow-one-pack(utility vendor))&quot; &quot;(utility (flow-one-pack(utility vendor)))&quot; &quot;(def key-val-seq (seq {:one 1 :two 2 :three 3}))&quot; &quot;(:one key-val-seq)&quot; &quot;(schema.core/explain Store)&quot; &quot;(s/check Store (make-product-store \&quot;store0\&quot; :target-inventory 5))&quot; &quot;(get-utility stores-index)&quot; &quot;(get-utility warehouses-index (get-utility stores-index))&quot; &quot;(get-utility vendors-index (get-utility warehouses-index (get-utility stores-index)))&quot; &quot;warehouses-index&quot; &quot;(get-utilities nodes)&quot; &quot;(def utilities (get-utilities nodes))&quot; &quot;utilities&quot; &quot;(let [{:keys [v0 w0]} ] utilities)&quot; &quot;(let [{:keys [v0 w0]} utilities])&quot; &quot;(let [{:keys [v0 w0]} utilities]\n  (println v0)\n  (println w0))&quot; &quot;(:v0 utilities)&quot; &quot;(flow nodes)&quot; &quot;(key {:vo \&quot;test\&quot;})&quot; &quot;(map key {:vo \&quot;test\&quot;})&quot; &quot;(key (keys {:vo \&quot;test\&quot;}))&quot; &quot;(keys {:vo \&quot;test\&quot;})&quot; &quot;(first (keys {:vo \&quot;test\&quot;}))&quot; &quot;(deftest test-highest-utility\n  (testing \&quot;test that a map of key to integer value returns the key with the highest integer value\&quot;\n    (let [map (:warehouses-index (include-utilities indexes))]\n      (is (= :w0 (key (highest-utility map)))))))&quot; &quot;(run-all-tests)&quot; &quot;(flow indexes)&quot;], :remote []}}</component>
</project>